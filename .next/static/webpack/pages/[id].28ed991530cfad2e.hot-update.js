/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/[id]",{

/***/ "./node_modules/next/dist/client/future/image.js":
/*!*******************************************************!*\
  !*** ./node_modules/next/dist/client/future/image.js ***!
  \*******************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = Image;\n\nvar _extends = (__webpack_require__(/*! @swc/helpers/lib/_extends.js */ \"./node_modules/@swc/helpers/lib/_extends.js\")[\"default\"]);\n\nvar _interop_require_default = (__webpack_require__(/*! @swc/helpers/lib/_interop_require_default.js */ \"./node_modules/@swc/helpers/lib/_interop_require_default.js\")[\"default\"]);\n\nvar _interop_require_wildcard = (__webpack_require__(/*! @swc/helpers/lib/_interop_require_wildcard.js */ \"./node_modules/@swc/helpers/lib/_interop_require_wildcard.js\")[\"default\"]);\n\nvar _object_without_properties_loose = (__webpack_require__(/*! @swc/helpers/lib/_object_without_properties_loose.js */ \"./node_modules/@swc/helpers/lib/_object_without_properties_loose.js\")[\"default\"]);\n\nvar _react = _interop_require_wildcard(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\n\nvar _head = _interop_require_default(__webpack_require__(/*! ../../shared/lib/head */ \"./node_modules/next/dist/shared/lib/head.js\"));\n\nvar _imageBlurSvg = __webpack_require__(/*! ../../shared/lib/image-blur-svg */ \"./node_modules/next/dist/shared/lib/image-blur-svg.js\");\n\nvar _imageConfig = __webpack_require__(/*! ../../shared/lib/image-config */ \"./node_modules/next/dist/shared/lib/image-config.js\");\n\nvar _imageConfigContext = __webpack_require__(/*! ../../shared/lib/image-config-context */ \"./node_modules/next/dist/shared/lib/image-config-context.js\");\n\nvar _utils = __webpack_require__(/*! ../../shared/lib/utils */ \"./node_modules/next/dist/shared/lib/utils.js\");\n\nfunction Image(_param) {\n  _s();\n\n  var {\n    src,\n    sizes,\n    unoptimized = false,\n    priority = false,\n    loading,\n    className,\n    quality,\n    width,\n    height,\n    fill,\n    style,\n    onLoadingComplete,\n    placeholder = 'empty',\n    blurDataURL\n  } = _param,\n      all = _object_without_properties_loose(_param, [\"src\", \"sizes\", \"unoptimized\", \"priority\", \"loading\", \"className\", \"quality\", \"width\", \"height\", \"fill\", \"style\", \"onLoadingComplete\", \"placeholder\", \"blurDataURL\"]);\n\n  const configContext = (0, _react).useContext(_imageConfigContext.ImageConfigContext);\n  const config = (0, _react).useMemo(() => {\n    const c = configEnv || configContext || _imageConfig.imageConfigDefault;\n    const allSizes = [...c.deviceSizes, ...c.imageSizes].sort((a, b) => a - b);\n    const deviceSizes = c.deviceSizes.sort((a, b) => a - b);\n    return _extends({}, c, {\n      allSizes,\n      deviceSizes\n    });\n  }, [configContext]);\n  let rest = all;\n  let loader = defaultLoader;\n\n  if ('loader' in rest) {\n    if (rest.loader) {\n      const customImageLoader = rest.loader;\n\n      var _tmp;\n\n      _tmp = obj => {\n        const {\n          config: _\n        } = obj,\n              opts = _object_without_properties_loose(obj, [\"config\"]); // The config object is internal only so we must\n        // not pass it to the user-defined loader()\n\n\n        return customImageLoader(opts);\n      }, loader = _tmp, _tmp;\n    } // Remove property so it's not spread on <img>\n\n\n    delete rest.loader;\n  }\n\n  let staticSrc = '';\n  let widthInt = getInt(width);\n  let heightInt = getInt(height);\n  let blurWidth;\n  let blurHeight;\n\n  if (isStaticImport(src)) {\n    const staticImageData = isStaticRequire(src) ? src.default : src;\n\n    if (!staticImageData.src) {\n      throw new Error(`An object should only be passed to the image component src parameter if it comes from a static image import. It must include src. Received ${JSON.stringify(staticImageData)}`);\n    }\n\n    if (!staticImageData.height || !staticImageData.width) {\n      throw new Error(`An object should only be passed to the image component src parameter if it comes from a static image import. It must include height and width. Received ${JSON.stringify(staticImageData)}`);\n    }\n\n    blurWidth = staticImageData.blurWidth;\n    blurHeight = staticImageData.blurHeight;\n    blurDataURL = blurDataURL || staticImageData.blurDataURL;\n    staticSrc = staticImageData.src;\n\n    if (!fill) {\n      if (!widthInt && !heightInt) {\n        widthInt = staticImageData.width;\n        heightInt = staticImageData.height;\n      } else if (widthInt && !heightInt) {\n        const ratio = widthInt / staticImageData.width;\n        heightInt = Math.round(staticImageData.height * ratio);\n      } else if (!widthInt && heightInt) {\n        const ratio = heightInt / staticImageData.height;\n        widthInt = Math.round(staticImageData.width * ratio);\n      }\n    }\n  }\n\n  src = typeof src === 'string' ? src : staticSrc;\n  let isLazy = !priority && (loading === 'lazy' || typeof loading === 'undefined');\n\n  if (src.startsWith('data:') || src.startsWith('blob:')) {\n    // https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\n    unoptimized = true;\n    isLazy = false;\n  }\n\n  if (config.unoptimized) {\n    unoptimized = true;\n  }\n\n  const [blurComplete, setBlurComplete] = (0, _react).useState(false);\n  const [showAltText, setShowAltText] = (0, _react).useState(false);\n  const qualityInt = getInt(quality);\n\n  if (true) {\n    if (!src) {\n      // React doesn't show the stack trace and there's\n      // no `src` to help identify which image, so we\n      // instead console.error(ref) during mount.\n      unoptimized = true;\n    } else {\n      if (fill) {\n        if (width) {\n          throw new Error(`Image with src \"${src}\" has both \"width\" and \"fill\" properties. Only one should be used.`);\n        }\n\n        if (height) {\n          throw new Error(`Image with src \"${src}\" has both \"height\" and \"fill\" properties. Only one should be used.`);\n        }\n\n        if ((style == null ? void 0 : style.position) && style.position !== 'absolute') {\n          throw new Error(`Image with src \"${src}\" has both \"fill\" and \"style.position\" properties. Images with \"fill\" always use position absolute - it cannot be modified.`);\n        }\n\n        if ((style == null ? void 0 : style.width) && style.width !== '100%') {\n          throw new Error(`Image with src \"${src}\" has both \"fill\" and \"style.width\" properties. Images with \"fill\" always use width 100% - it cannot be modified.`);\n        }\n\n        if ((style == null ? void 0 : style.height) && style.height !== '100%') {\n          throw new Error(`Image with src \"${src}\" has both \"fill\" and \"style.height\" properties. Images with \"fill\" always use height 100% - it cannot be modified.`);\n        }\n      } else {\n        if (typeof widthInt === 'undefined') {\n          throw new Error(`Image with src \"${src}\" is missing required \"width\" property.`);\n        } else if (isNaN(widthInt)) {\n          throw new Error(`Image with src \"${src}\" has invalid \"width\" property. Expected a numeric value in pixels but received \"${width}\".`);\n        }\n\n        if (typeof heightInt === 'undefined') {\n          throw new Error(`Image with src \"${src}\" is missing required \"height\" property.`);\n        } else if (isNaN(heightInt)) {\n          throw new Error(`Image with src \"${src}\" has invalid \"height\" property. Expected a numeric value in pixels but received \"${height}\".`);\n        }\n      }\n    }\n\n    if (!VALID_LOADING_VALUES.includes(loading)) {\n      throw new Error(`Image with src \"${src}\" has invalid \"loading\" property. Provided \"${loading}\" should be one of ${VALID_LOADING_VALUES.map(String).join(',')}.`);\n    }\n\n    if (priority && loading === 'lazy') {\n      throw new Error(`Image with src \"${src}\" has both \"priority\" and \"loading='lazy'\" properties. Only one should be used.`);\n    }\n\n    if (placeholder === 'blur') {\n      if (widthInt && heightInt && widthInt * heightInt < 1600) {\n        (0, _utils).warnOnce(`Image with src \"${src}\" is smaller than 40x40. Consider removing the \"placeholder='blur'\" property to improve performance.`);\n      }\n\n      if (!blurDataURL) {\n        const VALID_BLUR_EXT = ['jpeg', 'png', 'webp', 'avif'] // should match next-image-loader\n        ;\n        throw new Error(`Image with src \"${src}\" has \"placeholder='blur'\" property but is missing the \"blurDataURL\" property.\n          Possible solutions:\n            - Add a \"blurDataURL\" property, the contents should be a small Data URL to represent the image\n            - Change the \"src\" property to a static import with one of the supported file types: ${VALID_BLUR_EXT.join(',')}\n            - Remove the \"placeholder\" property, effectively no blur effect\n          Read more: https://nextjs.org/docs/messages/placeholder-blur-data-url`);\n      }\n    }\n\n    if ('ref' in rest) {\n      (0, _utils).warnOnce(`Image with src \"${src}\" is using unsupported \"ref\" property. Consider using the \"onLoadingComplete\" property instead.`);\n    }\n\n    if (!unoptimized && loader !== defaultLoader) {\n      const urlStr = loader({\n        config,\n        src,\n        width: widthInt || 400,\n        quality: qualityInt || 75\n      });\n      let url;\n\n      try {\n        url = new URL(urlStr);\n      } catch (err) {}\n\n      if (urlStr === src || url && url.pathname === src && !url.search) {\n        (0, _utils).warnOnce(`Image with src \"${src}\" has a \"loader\" property that does not implement width. Please implement it or use the \"unoptimized\" property instead.` + `\\nRead more: https://nextjs.org/docs/messages/next-image-missing-loader-width`);\n      }\n    }\n\n    if ( true && !perfObserver && window.PerformanceObserver) {\n      perfObserver = new PerformanceObserver(entryList => {\n        for (const entry of entryList.getEntries()) {\n          var ref; // @ts-ignore - missing \"LargestContentfulPaint\" class with \"element\" prop\n\n          const imgSrc = (entry == null ? void 0 : (ref = entry.element) == null ? void 0 : ref.src) || '';\n          const lcpImage = allImgs.get(imgSrc);\n\n          if (lcpImage && !lcpImage.priority && lcpImage.placeholder !== 'blur' && !lcpImage.src.startsWith('data:') && !lcpImage.src.startsWith('blob:')) {\n            // https://web.dev/lcp/#measure-lcp-in-javascript\n            (0, _utils).warnOnce(`Image with src \"${lcpImage.src}\" was detected as the Largest Contentful Paint (LCP). Please add the \"priority\" property if this image is above the fold.` + `\\nRead more: https://nextjs.org/docs/api-reference/next/image#priority`);\n          }\n        }\n      });\n\n      try {\n        perfObserver.observe({\n          type: 'largest-contentful-paint',\n          buffered: true\n        });\n      } catch (err) {\n        // Log error but don't crash the app\n        console.error(err);\n      }\n    }\n  }\n\n  const imgStyle = Object.assign(fill ? {\n    position: 'absolute',\n    height: '100%',\n    width: '100%',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0\n  } : {}, showAltText ? {} : {\n    color: 'transparent'\n  }, style);\n  const blurStyle = placeholder === 'blur' && blurDataURL && !blurComplete ? {\n    backgroundSize: imgStyle.objectFit || 'cover',\n    backgroundPosition: imgStyle.objectPosition || '50% 50%',\n    backgroundRepeat: 'no-repeat',\n    backgroundImage: `url(\"data:image/svg+xml;charset=utf-8,${(0, _imageBlurSvg).getImageBlurSvg({\n      widthInt,\n      heightInt,\n      blurWidth,\n      blurHeight,\n      blurDataURL\n    })}\")`\n  } : {};\n\n  if (true) {\n    if (blurStyle.backgroundImage && (blurDataURL == null ? void 0 : blurDataURL.startsWith('/'))) {\n      // During `next dev`, we don't want to generate blur placeholders with webpack\n      // because it can delay starting the dev server. Instead, `next-image-loader.js`\n      // will inline a special url to lazily generate the blur placeholder at request time.\n      blurStyle.backgroundImage = `url(\"${blurDataURL}\")`;\n    }\n  }\n\n  const imgAttributes = generateImgAttrs({\n    config,\n    src,\n    unoptimized,\n    width: widthInt,\n    quality: qualityInt,\n    sizes,\n    loader\n  });\n  let srcString = src;\n\n  if (true) {\n    if (true) {\n      let fullUrl;\n\n      try {\n        fullUrl = new URL(imgAttributes.src);\n      } catch (e) {\n        fullUrl = new URL(imgAttributes.src, window.location.href);\n      }\n\n      allImgs.set(fullUrl.href, {\n        src,\n        priority,\n        placeholder\n      });\n    }\n  }\n\n  let imageSrcSetPropName = 'imagesrcset';\n  let imageSizesPropName = 'imagesizes';\n\n  if (true) {\n    imageSrcSetPropName = 'imageSrcSet';\n    imageSizesPropName = 'imageSizes';\n  }\n\n  const linkProps = {\n    // Note: imagesrcset and imagesizes are not in the link element type with react 17.\n    [imageSrcSetPropName]: imgAttributes.srcSet,\n    [imageSizesPropName]: imgAttributes.sizes\n  };\n  const onLoadingCompleteRef = (0, _react).useRef(onLoadingComplete);\n  (0, _react).useEffect(() => {\n    onLoadingCompleteRef.current = onLoadingComplete;\n  }, [onLoadingComplete]);\n\n  const imgElementArgs = _extends({\n    isLazy,\n    imgAttributes,\n    heightInt,\n    widthInt,\n    qualityInt,\n    className,\n    imgStyle,\n    blurStyle,\n    loading,\n    config,\n    fill,\n    unoptimized,\n    placeholder,\n    loader,\n    srcString,\n    onLoadingCompleteRef,\n    setBlurComplete,\n    setShowAltText\n  }, rest);\n\n  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(ImageElement, Object.assign({}, imgElementArgs)), priority ? // Note how we omit the `href` attribute, as it would only be relevant\n  // for browsers that do not support `imagesrcset`, and in those cases\n  // it would likely cause the incorrect image to be preloaded.\n  //\n  // https://html.spec.whatwg.org/multipage/semantics.html#attr-link-imagesrcset\n\n  /*#__PURE__*/\n  _react.default.createElement(_head.default, null, /*#__PURE__*/_react.default.createElement(\"link\", Object.assign({\n    key: '__nimg-' + imgAttributes.src + imgAttributes.srcSet + imgAttributes.sizes,\n    rel: \"preload\",\n    as: \"image\",\n    href: imgAttributes.srcSet ? undefined : imgAttributes.src\n  }, linkProps))) : null);\n}\n\n_s(Image, \"+OgX7qtCT9rMRneDOlhii37h06s=\");\n\n_c = Image;\nconst configEnv = {\"deviceSizes\":[640,750,828,1080,1200,1920,2048,3840],\"imageSizes\":[16,32,48,64,96,128,256,384],\"path\":\"/_next/image\",\"loader\":\"default\",\"dangerouslyAllowSVG\":false,\"unoptimized\":false,\"domains\":[\"ddragon.leagueoflegends.com\"],\"remotePatterns\":[]};\nconst allImgs = new Map();\nlet perfObserver;\n\nif (false) {}\n\nconst VALID_LOADING_VALUES = ['lazy', 'eager', undefined];\n\nfunction isStaticRequire(src) {\n  return src.default !== undefined;\n}\n\nfunction isStaticImageData(src) {\n  return src.src !== undefined;\n}\n\nfunction isStaticImport(src) {\n  return typeof src === 'object' && (isStaticRequire(src) || isStaticImageData(src));\n}\n\nfunction getWidths(_ref, width, sizes) {\n  let {\n    deviceSizes,\n    allSizes\n  } = _ref;\n\n  if (sizes) {\n    // Find all the \"vw\" percent sizes used in the sizes prop\n    const viewportWidthRe = /(^|\\s)(1?\\d?\\d)vw/g;\n    const percentSizes = [];\n\n    for (let match; match = viewportWidthRe.exec(sizes); match) {\n      percentSizes.push(parseInt(match[2]));\n    }\n\n    if (percentSizes.length) {\n      const smallestRatio = Math.min(...percentSizes) * 0.01;\n      return {\n        widths: allSizes.filter(s => s >= deviceSizes[0] * smallestRatio),\n        kind: 'w'\n      };\n    }\n\n    return {\n      widths: allSizes,\n      kind: 'w'\n    };\n  }\n\n  if (typeof width !== 'number') {\n    return {\n      widths: deviceSizes,\n      kind: 'w'\n    };\n  }\n\n  const widths = [...new Set( // > This means that most OLED screens that say they are 3x resolution,\n  // > are actually 3x in the green color, but only 1.5x in the red and\n  // > blue colors. Showing a 3x resolution image in the app vs a 2x\n  // > resolution image will be visually the same, though the 3x image\n  // > takes significantly more data. Even true 3x resolution screens are\n  // > wasteful as the human eye cannot see that level of detail without\n  // > something like a magnifying glass.\n  // https://blog.twitter.com/engineering/en_us/topics/infrastructure/2019/capping-image-fidelity-on-ultra-high-resolution-devices.html\n  [width, width * 2\n  /*, width * 3*/\n  ].map(w => allSizes.find(p => p >= w) || allSizes[allSizes.length - 1]))];\n  return {\n    widths,\n    kind: 'x'\n  };\n}\n\nfunction generateImgAttrs(_ref2) {\n  let {\n    config,\n    src,\n    unoptimized,\n    width,\n    quality,\n    sizes,\n    loader\n  } = _ref2;\n\n  if (unoptimized) {\n    return {\n      src,\n      srcSet: undefined,\n      sizes: undefined\n    };\n  }\n\n  const {\n    widths,\n    kind\n  } = getWidths(config, width, sizes);\n  const last = widths.length - 1;\n  return {\n    sizes: !sizes && kind === 'w' ? '100vw' : sizes,\n    srcSet: widths.map((w, i) => `${loader({\n      config,\n      src,\n      quality,\n      width: w\n    })} ${kind === 'w' ? w : i + 1}${kind}`).join(', '),\n    // It's intended to keep `src` the last attribute because React updates\n    // attributes in order. If we keep `src` the first one, Safari will\n    // immediately start to fetch `src`, before `sizes` and `srcSet` are even\n    // updated by React. That causes multiple unnecessary requests if `srcSet`\n    // and `sizes` are defined.\n    // This bug cannot be reproduced in Chrome or Firefox.\n    src: loader({\n      config,\n      src,\n      quality,\n      width: widths[last]\n    })\n  };\n}\n\nfunction getInt(x) {\n  if (typeof x === 'number' || typeof x === 'undefined') {\n    return x;\n  }\n\n  if (typeof x === 'string' && /^[0-9]+$/.test(x)) {\n    return parseInt(x, 10);\n  }\n\n  return NaN;\n} // See https://stackoverflow.com/q/39777833/266535 for why we use this ref\n// handler instead of the img's onLoad attribute.\n\n\nfunction handleLoading(img, src, placeholder, onLoadingCompleteRef, setBlurComplete) {\n  if (!img || img['data-loaded-src'] === src) {\n    return;\n  }\n\n  img['data-loaded-src'] = src;\n  const p = 'decode' in img ? img.decode() : Promise.resolve();\n  p.catch(() => {}).then(() => {\n    if (!img.parentNode) {\n      // Exit early in case of race condition:\n      // - onload() is called\n      // - decode() is called but incomplete\n      // - unmount is called\n      // - decode() completes\n      return;\n    }\n\n    if (placeholder === 'blur') {\n      setBlurComplete(true);\n    }\n\n    if (onLoadingCompleteRef == null ? void 0 : onLoadingCompleteRef.current) {\n      onLoadingCompleteRef.current(img);\n    }\n\n    if (true) {\n      if (img.getAttribute('data-nimg') === 'future-fill') {\n        if (!img.getAttribute('sizes') || img.getAttribute('sizes') === '100vw') {\n          let widthViewportRatio = img.getBoundingClientRect().width / window.innerWidth;\n\n          if (widthViewportRatio < 0.6) {\n            (0, _utils).warnOnce(`Image with src \"${src}\" has \"fill\" but is missing \"sizes\" prop. Please add it to improve page performance. Read more: https://nextjs.org/docs/api-reference/next/future/image#sizes`);\n          }\n        }\n\n        if (img.parentElement) {\n          const {\n            position\n          } = window.getComputedStyle(img.parentElement);\n          const valid = ['absolute', 'fixed', 'relative'];\n\n          if (!valid.includes(position)) {\n            (0, _utils).warnOnce(`Image with src \"${src}\" has \"fill\" and parent element with invalid \"position\". Provided \"${position}\" should be one of ${valid.map(String).join(',')}.`);\n          }\n        }\n\n        if (img.height === 0) {\n          (0, _utils).warnOnce(`Image with src \"${src}\" has \"fill\" and a height value of 0. This is likely because the parent element of the image has not been styled to have a set height.`);\n        }\n      }\n\n      const heightModified = img.height.toString() !== img.getAttribute('height');\n      const widthModified = img.width.toString() !== img.getAttribute('width');\n\n      if (heightModified && !widthModified || !heightModified && widthModified) {\n        (0, _utils).warnOnce(`Image with src \"${src}\" has either width or height modified, but not the other. If you use CSS to change the size of your image, also include the styles 'width: \"auto\"' or 'height: \"auto\"' to maintain the aspect ratio.`);\n      }\n    }\n  });\n}\n\nconst ImageElement = _param => {\n  _s2();\n\n  var {\n    imgAttributes,\n    heightInt,\n    widthInt,\n    qualityInt,\n    className,\n    imgStyle,\n    blurStyle,\n    isLazy,\n    fill,\n    placeholder,\n    loading,\n    srcString,\n    config,\n    unoptimized,\n    loader,\n    onLoadingCompleteRef,\n    setBlurComplete,\n    setShowAltText,\n    onLoad,\n    onError\n  } = _param,\n      rest = _object_without_properties_loose(_param, [\"imgAttributes\", \"heightInt\", \"widthInt\", \"qualityInt\", \"className\", \"imgStyle\", \"blurStyle\", \"isLazy\", \"fill\", \"placeholder\", \"loading\", \"srcString\", \"config\", \"unoptimized\", \"loader\", \"onLoadingCompleteRef\", \"setBlurComplete\", \"setShowAltText\", \"onLoad\", \"onError\"]);\n\n  loading = isLazy ? 'lazy' : loading;\n  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(\"img\", Object.assign({}, rest, imgAttributes, {\n    width: widthInt,\n    height: heightInt,\n    decoding: \"async\",\n    \"data-nimg\": `future${fill ? '-fill' : ''}`,\n    className: className,\n    // @ts-ignore - TODO: upgrade to `@types/react@17`\n    loading: loading,\n    style: _extends({}, imgStyle, blurStyle),\n    ref: (0, _react).useCallback(img => {\n      if (!img) {\n        return;\n      }\n\n      if (onError) {\n        // If the image has an error before react hydrates, then the error is lost.\n        // The workaround is to wait until the image is mounted which is after hydration,\n        // then we set the src again to trigger the error handler (if there was an error).\n        // eslint-disable-next-line no-self-assign\n        img.src = img.src;\n      }\n\n      if (true) {\n        if (!srcString) {\n          console.error(`Image is missing required \"src\" property:`, img);\n        }\n\n        if (img.getAttribute('objectFit') || img.getAttribute('objectfit')) {\n          console.error(`Image has unknown prop \"objectFit\". Did you mean to use the \"style\" prop instead?`, img);\n        }\n\n        if (img.getAttribute('objectPosition') || img.getAttribute('objectposition')) {\n          console.error(`Image has unknown prop \"objectPosition\". Did you mean to use the \"style\" prop instead?`, img);\n        }\n\n        if (img.getAttribute('alt') === null) {\n          console.error(`Image is missing required \"alt\" property. Please add Alternative Text to describe the image for screen readers and search engines.`);\n        }\n      }\n\n      if (img.complete) {\n        handleLoading(img, srcString, placeholder, onLoadingCompleteRef, setBlurComplete);\n      }\n    }, [srcString, placeholder, onLoadingCompleteRef, setBlurComplete, onError]),\n    onLoad: event => {\n      const img = event.currentTarget;\n      handleLoading(img, srcString, placeholder, onLoadingCompleteRef, setBlurComplete);\n\n      if (onLoad) {\n        onLoad(event);\n      }\n    },\n    onError: event => {\n      // if the real image fails to load, this will ensure \"alt\" is visible\n      setShowAltText(true);\n\n      if (placeholder === 'blur') {\n        // If the real image fails to load, this will still remove the placeholder.\n        setBlurComplete(true);\n      }\n\n      if (onError) {\n        onError(event);\n      }\n    }\n  })));\n};\n\n_s2(ImageElement, \"epj4qY15NHsef74wNqHIp5fdZmg=\");\n\n_c2 = ImageElement;\n\nfunction defaultLoader(_ref3) {\n  let {\n    config,\n    src,\n    width,\n    quality\n  } = _ref3;\n\n  if (true) {\n    const missingValues = []; // these should always be provided but make sure they are\n\n    if (!src) missingValues.push('src');\n    if (!width) missingValues.push('width');\n\n    if (missingValues.length > 0) {\n      throw new Error(`Next Image Optimization requires ${missingValues.join(', ')} to be provided. Make sure you pass them as props to the \\`next/image\\` component. Received: ${JSON.stringify({\n        src,\n        width,\n        quality\n      })}`);\n    }\n\n    if (src.startsWith('//')) {\n      throw new Error(`Failed to parse src \"${src}\" on \\`next/image\\`, protocol-relative URL (//) must be changed to an absolute URL (http:// or https://)`);\n    }\n\n    if (!src.startsWith('/') && (config.domains || config.remotePatterns)) {\n      let parsedSrc;\n\n      try {\n        parsedSrc = new URL(src);\n      } catch (err) {\n        console.error(err);\n        throw new Error(`Failed to parse src \"${src}\" on \\`next/image\\`, if using relative image it must start with a leading slash \"/\" or be an absolute URL (http:// or https://)`);\n      }\n\n      if (true) {\n        // We use dynamic require because this should only error in development\n        const {\n          hasMatch\n        } = __webpack_require__(/*! ../../shared/lib/match-remote-pattern */ \"./node_modules/next/dist/shared/lib/match-remote-pattern.js\");\n\n        if (!hasMatch(config.domains, config.remotePatterns, parsedSrc)) {\n          throw new Error(`Invalid src prop (${src}) on \\`next/image\\`, hostname \"${parsedSrc.hostname}\" is not configured under images in your \\`next.config.js\\`\\n` + `See more info: https://nextjs.org/docs/messages/next-image-unconfigured-host`);\n        }\n      }\n    }\n  }\n\n  if (src.endsWith('.svg') && !config.dangerouslyAllowSVG) {\n    // Special case to make svg serve as-is to avoid proxying\n    // through the built-in Image Optimization API.\n    return src;\n  }\n\n  return `${config.path}?url=${encodeURIComponent(src)}&w=${width}&q=${quality || 75}`;\n}\n\nif ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {\n  Object.defineProperty(exports.default, '__esModule', {\n    value: true\n  });\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Image\");\n$RefreshReg$(_c2, \"ImageElement\");\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/future/image.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/shared/lib/image-blur-svg.js":
/*!*************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/image-blur-svg.js ***!
  \*************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.getImageBlurSvg = getImageBlurSvg;\n\nfunction getImageBlurSvg(_ref) {\n  let {\n    widthInt,\n    heightInt,\n    blurWidth,\n    blurHeight,\n    blurDataURL\n  } = _ref;\n  const std = blurWidth && blurHeight ? '1' : '20';\n  const svgWidth = blurWidth || widthInt;\n  const svgHeight = blurHeight || heightInt;\n  const feComponentTransfer = blurDataURL.startsWith('data:image/jpeg') ? `%3CfeComponentTransfer%3E%3CfeFuncA type='discrete' tableValues='1 1'/%3E%3C/feComponentTransfer%3E%` : '';\n  return `%3Csvg xmlns='http%3A//www.w3.org/2000/svg' viewBox='0 0 ${svgWidth} ${svgHeight}'%3E%3Cfilter id='b' color-interpolation-filters='sRGB'%3E%3CfeGaussianBlur stdDeviation='${std}'/%3E${feComponentTransfer}%3C/filter%3E%3Cimage filter='url(%23b)' x='0' y='0' height='100%25' width='100%25' href='${blurDataURL}'/%3E%3C/svg%3E`;\n}\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvaW1hZ2UtYmx1ci1zdmcuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLDhDQUE2QztFQUN6Q0csS0FBSyxFQUFFO0FBRGtDLENBQTdDO0FBR0FELHVCQUFBLEdBQTBCRSxlQUExQjs7QUFDQSxTQUFTQSxlQUFULE9BQTJGO0VBQUEsSUFBbEU7SUFBRUMsUUFBRjtJQUFhQyxTQUFiO0lBQXlCQyxTQUF6QjtJQUFxQ0MsVUFBckM7SUFBa0RDO0VBQWxELENBQWtFO0VBQ3ZGLE1BQU1DLEdBQUcsR0FBR0gsU0FBUyxJQUFJQyxVQUFiLEdBQTBCLEdBQTFCLEdBQWdDLElBQTVDO0VBQ0EsTUFBTUcsUUFBUSxHQUFHSixTQUFTLElBQUlGLFFBQTlCO0VBQ0EsTUFBTU8sU0FBUyxHQUFHSixVQUFVLElBQUlGLFNBQWhDO0VBQ0EsTUFBTU8sbUJBQW1CLEdBQUdKLFdBQVcsQ0FBQ0ssVUFBWixDQUF1QixpQkFBdkIsSUFBNkMsc0dBQTdDLEdBQXFKLEVBQWpMO0VBQ0EsT0FBUSw0REFBMkRILFFBQVMsSUFBR0MsU0FBVSw2RkFBNEZGLEdBQUksUUFBT0csbUJBQW9CLDZGQUE0RkosV0FBWSxpQkFBNVQ7QUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvaW1hZ2UtYmx1ci1zdmcuanM/OTU3MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZ2V0SW1hZ2VCbHVyU3ZnID0gZ2V0SW1hZ2VCbHVyU3ZnO1xuZnVuY3Rpb24gZ2V0SW1hZ2VCbHVyU3ZnKHsgd2lkdGhJbnQgLCBoZWlnaHRJbnQgLCBibHVyV2lkdGggLCBibHVySGVpZ2h0ICwgYmx1ckRhdGFVUkwgIH0pIHtcbiAgICBjb25zdCBzdGQgPSBibHVyV2lkdGggJiYgYmx1ckhlaWdodCA/ICcxJyA6ICcyMCc7XG4gICAgY29uc3Qgc3ZnV2lkdGggPSBibHVyV2lkdGggfHwgd2lkdGhJbnQ7XG4gICAgY29uc3Qgc3ZnSGVpZ2h0ID0gYmx1ckhlaWdodCB8fCBoZWlnaHRJbnQ7XG4gICAgY29uc3QgZmVDb21wb25lbnRUcmFuc2ZlciA9IGJsdXJEYXRhVVJMLnN0YXJ0c1dpdGgoJ2RhdGE6aW1hZ2UvanBlZycpID8gYCUzQ2ZlQ29tcG9uZW50VHJhbnNmZXIlM0UlM0NmZUZ1bmNBIHR5cGU9J2Rpc2NyZXRlJyB0YWJsZVZhbHVlcz0nMSAxJy8lM0UlM0MvZmVDb21wb25lbnRUcmFuc2ZlciUzRSVgIDogJyc7XG4gICAgcmV0dXJuIGAlM0NzdmcgeG1sbnM9J2h0dHAlM0EvL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCAke3N2Z1dpZHRofSAke3N2Z0hlaWdodH0nJTNFJTNDZmlsdGVyIGlkPSdiJyBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnM9J3NSR0InJTNFJTNDZmVHYXVzc2lhbkJsdXIgc3RkRGV2aWF0aW9uPScke3N0ZH0nLyUzRSR7ZmVDb21wb25lbnRUcmFuc2Zlcn0lM0MvZmlsdGVyJTNFJTNDaW1hZ2UgZmlsdGVyPSd1cmwoJTIzYiknIHg9JzAnIHk9JzAnIGhlaWdodD0nMTAwJTI1JyB3aWR0aD0nMTAwJTI1JyBocmVmPScke2JsdXJEYXRhVVJMfScvJTNFJTNDL3N2ZyUzRWA7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWltYWdlLWJsdXItc3ZnLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldEltYWdlQmx1clN2ZyIsIndpZHRoSW50IiwiaGVpZ2h0SW50IiwiYmx1cldpZHRoIiwiYmx1ckhlaWdodCIsImJsdXJEYXRhVVJMIiwic3RkIiwic3ZnV2lkdGgiLCJzdmdIZWlnaHQiLCJmZUNvbXBvbmVudFRyYW5zZmVyIiwic3RhcnRzV2l0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/shared/lib/image-blur-svg.js\n"));

/***/ }),

/***/ "./src/components/WatingRoom/LiftUserIndicator.js":
/*!********************************************************!*\
  !*** ./src/components/WatingRoom/LiftUserIndicator.js ***!
  \********************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var next_future_image__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/future/image */ \"./node_modules/next/future/image.js\");\n/* harmony import */ var next_future_image__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_future_image__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! styled-components */ \"./node_modules/styled-components/dist/styled-components.browser.esm.js\");\n/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-redux */ \"./node_modules/react-redux/es/index.js\");\n/* harmony import */ var _CONSTDATA_CONSTDATA__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../CONSTDATA/CONSTDATA */ \"./src/components/CONSTDATA/CONSTDATA.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__);\nvar _jsxFileName = \"/Users/moonhyeseong/Documents/assign-banpick/src/components/WatingRoom/LiftUserIndicator.js\",\n    _s = $RefreshSig$();\n\n\n\n\n\n\n\n\nconst LiftUserIndicator = _ref => {\n  _s();\n\n  let {\n    userList,\n    mode\n  } = _ref;\n  const userData = (0,react_redux__WEBPACK_IMPORTED_MODULE_1__.useSelector)(state => state.userFormData.userData);\n  const userID =  true ? sessionStorage.getItem('USER_ID') : 0;\n  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)(LiftBackGround, {\n    children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)(Filter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, undefined), _CONSTDATA_CONSTDATA__WEBPACK_IMPORTED_MODULE_2__.MODEDATA.oneOnOne === mode && /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment, {\n      children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)(RoleIcon, {\n        side: \"blue\",\n        role: \"solo\",\n        mode: mode,\n        isReady: userList?.blue[0].isReady,\n        isJoin: userList?.blue[0] === '',\n        isUserPosition: userID === userList?.blue[0].userId,\n        children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)((next_future_image__WEBPACK_IMPORTED_MODULE_0___default()), {\n          width: \"60\",\n          height: \"60\",\n          src: \"/images/ROLE/solo.png\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 13\n        }, undefined)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 11\n      }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)(RoleIcon, {\n        side: \"red\",\n        role: \"solo\",\n        mode: mode,\n        isReady: userList?.red[0].isReady,\n        isJoin: userList?.red[0] === '',\n        isUserPosition: userID === userList?.red[0].userId,\n        children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)((next_future_image__WEBPACK_IMPORTED_MODULE_0___default()), {\n          width: \"60\",\n          height: \"60\",\n          src: \"/images/ROLE/solo.png\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }, undefined)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, undefined)]\n    }, void 0, true), _CONSTDATA_CONSTDATA__WEBPACK_IMPORTED_MODULE_2__.MODEDATA.fiveOnfive === mode && /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment, {\n      children: [userList.blue.map((playerData, idx) => {\n        return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)(RoleIcon, {\n          side: \"blue\",\n          mode: mode,\n          role: ROLE_INFO[idx],\n          isJoin: playerData === '',\n          isReady: playerData.isReady,\n          isUserPosition: userData?.userId === playerData.userId,\n          children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)((next_future_image__WEBPACK_IMPORTED_MODULE_0___default()), {\n            width: \"60\",\n            height: \"60\",\n            src: `/images/ROLE/${ROLE_INFO[idx]}.png`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 17\n          }, undefined)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 15\n        }, undefined);\n      }), userList.red.map((playerData, idx) => {\n        return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)(RoleIcon, {\n          side: \"red\",\n          mode: mode,\n          role: ROLE_INFO[idx],\n          isJoin: playerData === '',\n          isReady: playerData.isReady,\n          isUserPosition: userData?.userId === playerData.userId,\n          src: `/images/ROLE/${ROLE_INFO[idx]}.png`,\n          children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)((next_future_image__WEBPACK_IMPORTED_MODULE_0___default()), {\n            width: \"60\",\n            height: \"60\",\n            src: `/images/ROLE/${ROLE_INFO[idx]}.png`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 17\n          }, undefined)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 15\n        }, undefined);\n      })]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, undefined);\n};\n\n_s(LiftUserIndicator, \"b1+cdUNjwz2gXT4ruClBbvvBoIw=\", false, function () {\n  return [react_redux__WEBPACK_IMPORTED_MODULE_1__.useSelector];\n});\n\n_c = LiftUserIndicator;\n/* harmony default export */ __webpack_exports__[\"default\"] = (LiftUserIndicator);\nconst LiftBackGround = styled_components__WEBPACK_IMPORTED_MODULE_4__[\"default\"].div.withConfig({\n  displayName: \"LiftUserIndicator__LiftBackGround\",\n  componentId: \"sc-1pl6t6j-0\"\n})([\"top:0;left:0;position:absolute;width:100%;height:776px;background:url('./images/lift.png') no-repeat;background-position:top;background-size:contain;opacity:0.8;\"]);\n_c2 = LiftBackGround;\nconst Filter = styled_components__WEBPACK_IMPORTED_MODULE_4__[\"default\"].div.withConfig({\n  displayName: \"LiftUserIndicator__Filter\",\n  componentId: \"sc-1pl6t6j-1\"\n})([\"position:absolute;width:100%;height:100%;backdrop-filter:blur(1px);\"]);\n_c3 = Filter;\nconst RoleIcon = styled_components__WEBPACK_IMPORTED_MODULE_4__[\"default\"].div.withConfig({\n  displayName: \"LiftUserIndicator__RoleIcon\",\n  componentId: \"sc-1pl6t6j-2\"\n})([\"position:absolute;border-radius:30px;padding:10px;border:3px solid white;z-index:10;width:60px;height:60px;@keyframes blink-effect{50%{opacity:0;}}\", \" \", \" \", \"   \", \"   \", \"  \", \"   \", \"   \", \"   \", \"   \", \"  \", \"   \", \"   \", \" \", \" \", \"   \", \"\"], props => props.mode === _CONSTDATA_CONSTDATA__WEBPACK_IMPORTED_MODULE_2__.MODEDATA.oneOnOne && props.side === 'blue' && props.role === 'solo' && (0,styled_components__WEBPACK_IMPORTED_MODULE_4__.css)([\"bottom:360px;left:530px;\"]), props => props.mode === _CONSTDATA_CONSTDATA__WEBPACK_IMPORTED_MODULE_2__.MODEDATA.oneOnOne && props.side === 'red' && props.role === 'solo' && (0,styled_components__WEBPACK_IMPORTED_MODULE_4__.css)([\"top:170px;right:490px;\"]), props => props.mode === _CONSTDATA_CONSTDATA__WEBPACK_IMPORTED_MODULE_2__.MODEDATA.fiveOnfive && props.side === 'blue' && props.role === 'TOP' && (0,styled_components__WEBPACK_IMPORTED_MODULE_4__.css)([\"top:174px;left:450px;border:3px solid \", \";\"], props => props.theme.blue.blueW80), props => props.mode === _CONSTDATA_CONSTDATA__WEBPACK_IMPORTED_MODULE_2__.MODEDATA.fiveOnfive && props.side === 'blue' && props.role === 'JUNGLE' && (0,styled_components__WEBPACK_IMPORTED_MODULE_4__.css)([\"top:240px;left:550px;border:3px solid \", \";\"], props => props.theme.blue.blueW80), props => props.mode === _CONSTDATA_CONSTDATA__WEBPACK_IMPORTED_MODULE_2__.MODEDATA.fiveOnfive && props.side === 'blue' && props.role === 'MID' && (0,styled_components__WEBPACK_IMPORTED_MODULE_4__.css)([\"top:290px;left:638px;border:3px solid \", \";\"], props => props.theme.blue.blueW80), props => props.mode === _CONSTDATA_CONSTDATA__WEBPACK_IMPORTED_MODULE_2__.MODEDATA.fiveOnfive && props.side === 'blue' && props.role === 'ADC' && (0,styled_components__WEBPACK_IMPORTED_MODULE_4__.css)([\"bottom:280px;left:860px;border:3px solid \", \";\"], props => props.theme.blue.blueW80), props => props.mode === _CONSTDATA_CONSTDATA__WEBPACK_IMPORTED_MODULE_2__.MODEDATA.fiveOnfive && props.side === 'blue' && props.role === 'SUPPORT' && (0,styled_components__WEBPACK_IMPORTED_MODULE_4__.css)([\"bottom:280px;left:780px;border:3px solid \", \";\"], props => props.theme.blue.blueW80), props => props.mode === _CONSTDATA_CONSTDATA__WEBPACK_IMPORTED_MODULE_2__.MODEDATA.fiveOnfive && props.side === 'red' && props.role === 'TOP' && (0,styled_components__WEBPACK_IMPORTED_MODULE_4__.css)([\"top:97px;right:714px;border:3px solid \", \";\"], props => props.theme.red.redW80), props => props.mode === _CONSTDATA_CONSTDATA__WEBPACK_IMPORTED_MODULE_2__.MODEDATA.fiveOnfive && props.side === 'red' && props.role === 'JUNGLE' && (0,styled_components__WEBPACK_IMPORTED_MODULE_4__.css)([\"top:160px;right:640px;border:3px solid \", \";\"], props => props.theme.red.redW80), props => props.mode === _CONSTDATA_CONSTDATA__WEBPACK_IMPORTED_MODULE_2__.MODEDATA.fiveOnfive && props.side === 'red' && props.role === 'MID' && (0,styled_components__WEBPACK_IMPORTED_MODULE_4__.css)([\"top:220px;right:580px;border:3px solid \", \";\"], props => props.theme.red.redW80), props => props.mode === _CONSTDATA_CONSTDATA__WEBPACK_IMPORTED_MODULE_2__.MODEDATA.fiveOnfive && props.side === 'red' && props.role === 'ADC' && (0,styled_components__WEBPACK_IMPORTED_MODULE_4__.css)([\"bottom:378px;right:343px;border:3px solid \", \";\"], props => props.theme.red.redW80), props => props.mode === _CONSTDATA_CONSTDATA__WEBPACK_IMPORTED_MODULE_2__.MODEDATA.fiveOnfive && props.side === 'red' && props.role === 'SUPPORT' && (0,styled_components__WEBPACK_IMPORTED_MODULE_4__.css)([\"bottom:456px;right:353px;border:3px solid \", \";\"], props => props.theme.red.redW80), props => props.isUserPosition && props.side === 'red' && (0,styled_components__WEBPACK_IMPORTED_MODULE_4__.css)([\"opacity:1;width:80px;height:80px;border-radius:40px;border-width:4px;border-color:\", \";;\"], props => props.theme.red.redW80), props => props.isUserPosition && props.side === 'blue' && (0,styled_components__WEBPACK_IMPORTED_MODULE_4__.css)([\"opacity:1;width:80px;height:80px;border-radius:40px;border-width:4px;border-color:\", \";;\"], props => props.theme.blue.blueW60), props => props.isReady || props.isUserPosition && (0,styled_components__WEBPACK_IMPORTED_MODULE_4__.css)([\"animation:blink-effect 1.5s ease-in-out infinite alternate;\"]), props => props.isJoin && (0,styled_components__WEBPACK_IMPORTED_MODULE_4__.css)([\"opacity:0.4;\"]));\n_c4 = RoleIcon;\nconst ROLE_INFO = ['TOP', 'JUNGLE', 'MID', 'ADC', 'SUPPORT'];\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"LiftUserIndicator\");\n$RefreshReg$(_c2, \"LiftBackGround\");\n$RefreshReg$(_c3, \"Filter\");\n$RefreshReg$(_c4, \"RoleIcon\");\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/WatingRoom/LiftUserIndicator.js\n"));

/***/ }),

/***/ "./node_modules/next/future/image.js":
/*!*******************************************!*\
  !*** ./node_modules/next/future/image.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("module.exports = __webpack_require__(/*! ../dist/client/future/image */ \"./node_modules/next/dist/client/future/image.js\")\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9mdXR1cmUvaW1hZ2UuanMuanMiLCJtYXBwaW5ncyI6IkFBQUEsMEhBQXVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Z1dHVyZS9pbWFnZS5qcz9jMDRkIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vZGlzdC9jbGllbnQvZnV0dXJlL2ltYWdlJylcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/future/image.js\n"));

/***/ })

});